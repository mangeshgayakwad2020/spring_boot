package com.greatdigitallab.springbootcruddemo.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.greatdigitallab.springbootcruddemo.entity.Employee;
import com.greatdigitallab.springbootcruddemo.service.EmployeeService;

@RestController
@RequestMapping("/api")
public class EmployeeRestController {

	// inject employee service (using constructor injection)
	private EmployeeService employeeService;

	@Autowired
	public EmployeeRestController(EmployeeService employeeService) {
		this.employeeService = employeeService;
	}

	// expose "/employees" and return list of employees
	@RequestMapping("/employees")
	public List<Employee> getEmployees(){
		return employeeService.findAll();
	}

	// expose "/employees/{employeeId}"
	@RequestMapping("/employees/{employeeId}")
	public Employee getEmployee(@PathVariable int employeeId){

		Employee employee = employeeService.findById(employeeId);

		if(employee == null) {
			throw new RuntimeException("Employee id not found : " + employeeId);
		}

		return employee;
	}
	
	// expose POST "/employees" to add new employee
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee) {
		
		// As we are adding new employee, forcefully set id to 0
		// It will be generated by database
		employee.setId(0);
		
		employeeService.save(employee);
		
		return employee;
	}
	
	// expose PUT "/employees" - to update an employee
	@PutMapping("/employees")
	public Employee updateEmployee(@RequestBody Employee employee) {
		
		employeeService.save(employee);
		
		return employee;
	}
	
	// expose DELETE "/employees/{employeeId}" - to delete an employee
	@DeleteMapping("/employees/{employeeId}")
	public String deleteEmployee(@PathVariable int employeeId) {
		
		Employee employee = employeeService.findById(employeeId);
				
		// throw exception if null
		if(employee == null) {
			throw new RuntimeException("Employee id not found : " + employeeId);
		}

		employeeService.deleteById(employeeId);
		
		return "Deleted employee id : " + employeeId;
	}
}











